export interface VulnerabilityContext {
  assetValue: number; // 0-10 importance of the affected asset
  exploitability: number; // 0-10 likelihood of exploit
  lateralMovement: number; // 0-10 potential for lateral movement
  activeExploitation: boolean; // currently being exploited
}

export interface RankingWeights {
  assetValue: number;
  exploitability: number;
  lateralMovement: number;
  activeExploitation: number;
}

export const defaultWeights: RankingWeights = {
  assetValue: 1,
  exploitability: 1,
  lateralMovement: 1,
  activeExploitation: 2
};

export function calculateVulnerabilityScore(
  context: VulnerabilityContext,
  weights: RankingWeights = defaultWeights
): number {
  const score =
    context.assetValue * weights.assetValue +
    context.exploitability * weights.exploitability +
    context.lateralMovement * weights.lateralMovement +
    (context.activeExploitation ? weights.activeExploitation * 10 : 0);
  return score;
}
