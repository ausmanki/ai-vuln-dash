"""
Test script for the Vulnerability Scanner Agent

This script tests the functionality of the vulnerability scanner agent
by running various test cases to validate its components and integration.
"""

import os
import sys
import json
import time
from typing import Dict, Any, List

# Import the agent components
from vulnerability_scanner_agent import create_vulnerability_scanner_agent, create_runner, process_vulnerability_data
from cve_data_collector import CVEDataCollector
from epss_score_collector import EPSSScoreCollector
from cisa_kev_collector import CISAKEVCollector
from patch_link_finder import PatchLinkFinder

def test_cve_collector():
    """Test the CVE data collector component."""
    print("\n=== Testing CVE Data Collector ===")
    
    collector = CVEDataCollector()
    
    # Test case 1: Search by CVE ID
    print("\nTest Case 1: Search by CVE ID (CVE-2021-44228)")
    result = collector.search_cve(cve_id="CVE-2021-44228")
    
    if result["status"] == "success" and len(result["vulnerabilities"]) > 0:
        print("✓ Successfully retrieved CVE-2021-44228")
        vuln = result["vulnerabilities"][0]
        print(f"  - Description: {vuln.get('description')[:100]}...")
        print(f"  - CVSS v3 Score: {vuln.get('cvss_v3', {}).get('base_score')}")
    else:
        print("✗ Failed to retrieve CVE-2021-44228")
        print(f"  - Error: {result.get('error_message', 'Unknown error')}")
    
    # Test case 2: Search by keywords
    print("\nTest Case 2: Search by keywords ('log4j')")
    result = collector.search_cve(keywords=["log4j"], max_results=5)
    
    if result["status"] == "success" and len(result["vulnerabilities"]) > 0:
        print(f"✓ Successfully retrieved {len(result['vulnerabilities'])} vulnerabilities for 'log4j'")
        for i, vuln in enumerate(result["vulnerabilities"][:3], 1):
            print(f"  {i}. {vuln.get('cve_id')} - {vuln.get('description')[:50]}...")
    else:
        print("✗ Failed to retrieve vulnerabilities for 'log4j'")
        print(f"  - Error: {result.get('error_message', 'Unknown error')}")
    
    return True

def test_epss_collector():
    """Test the EPSS score collector component."""
    print("\n=== Testing EPSS Score Collector ===")
    
    collector = EPSSScoreCollector()
    
    # Test case 1: Get score for a single CVE
    print("\nTest Case 1: Get EPSS score for CVE-2021-44228")
    result = collector.get_score("CVE-2021-44228")
    
    if result["status"] == "success" and result.get("epss_score") is not None:
        print("✓ Successfully retrieved EPSS score for CVE-2021-44228")
        print(f"  - EPSS Score: {result.get('epss_score')}")
        print(f"  - Percentile: {result.get('percentile')}")
    else:
        print("✗ Failed to retrieve EPSS score for CVE-2021-44228")
        print(f"  - Error: {result.get('error_message', 'Unknown error')}")
    
    # Test case 2: Get scores for multiple CVEs
    print("\nTest Case 2: Get EPSS scores for multiple CVEs")
    result = collector.get_scores_batch(["CVE-2021-44228", "CVE-2021-45046"])
    
    if result["status"] == "success" and len(result["scores"]) > 0:
        print(f"✓ Successfully retrieved EPSS scores for {len(result['scores'])} vulnerabilities")
        for score_info in result["scores"]:
            print(f"  - {score_info.get('cve_id')}: {score_info.get('epss_score')}")
    else:
        print("✗ Failed to retrieve EPSS scores for multiple CVEs")
        print(f"  - Error: {result.get('error_message', 'Unknown error')}")
    
    return True

def test_kev_collector():
    """Test the CISA KEV collector component."""
    print("\n=== Testing CISA KEV Collector ===")
    
    collector = CISAKEVCollector()
    
    # Test case 1: Check if a vulnerability is in the KEV catalog
    print("\nTest Case 1: Check if CVE-2021-44228 is in the KEV catalog")
    result = collector.check_vulnerability("CVE-2021-44228")
    
    if result["status"] == "success":
        print(f"✓ Successfully checked CVE-2021-44228 in KEV catalog")
        print(f"  - In Catalog: {result.get('in_catalog')}")
        if result.get('in_catalog'):
            print(f"  - Added: {result.get('kev_info', {}).get('date_added')}")
            print(f"  - Description: {result.get('kev_info', {}).get('short_description')}")
    else:
        print("✗ Failed to check CVE-2021-44228 in KEV catalog")
        print(f"  - Error: {result.get('error_message', 'Unknown error')}")
    
    # Test case 2: Get recent additions to the KEV catalog
    print("\nTest Case 2: Get recent additions to the KEV catalog (last 90 days)")
    result = collector.get_recent_additions(days=90)
    
    if result["status"] == "success":
        print(f"✓ Successfully retrieved {result.get('count')} recent additions to KEV catalog")
        for i, vuln in enumerate(result.get('recent_additions', [])[:3], 1):
            print(f"  {i}. {vuln.get('cve_id')} - {vuln.get('date_added')}")
    else:
        print("✗ Failed to retrieve recent additions to KEV catalog")
        print(f"  - Error: {result.get('error_message', 'Unknown error')}")
    
    return True

def test_patch_finder():
    """Test the patch link finder component."""
    print("\n=== Testing Patch Link Finder ===")
    
    finder = PatchLinkFinder()
    
    # Test case 1: Find patch links for a single CVE
    print("\nTest Case 1: Find patch links for CVE-2021-44228")
    result = finder.find_patch_links("CVE-2021-44228")
    
    if result["status"] == "success":
        print(f"✓ Successfully found patch information for CVE-2021-44228")
        print(f"  - Patch Links: {len(result.get('patch_links', []))}")
        print(f"  - Vendor Advisories: {len(result.get('vendor_advisories', []))}")
        if result.get('patch_links'):
            print(f"  - Example Link: {result.get('patch_links', [])[0]}")
    else:
        print("✗ Failed to find patch information for CVE-2021-44228")
        print(f"  - Error: {result.get('error_message', 'Unknown error')}")
    
    return True

def test_integrated_agent():
    """Test the integrated vulnerability scanner agent."""
    print("\n=== Testing Integrated Vulnerability Scanner Agent ===")
    
    # Create the agent and runner
    agent = create_vulnerability_scanner_agent()
    runner = create_runner(agent)
    
    # Test case 1: Query for a specific CVE
    print("\nTest Case 1: Query for CVE-2021-44228")
    try:
        response = runner.run("Tell me about CVE-2021-44228")
        print("✓ Agent successfully processed the query")
        print(f"Response: {response.text[:200]}...")
    except Exception as e:
        print("✗ Agent failed to process the query")
        print(f"  - Error: {str(e)}")
    
    # Test case 2: Search for vulnerabilities by keyword
    print("\nTest Case 2: Search for vulnerabilities related to 'log4j'")
    try:
        response = runner.run("Find vulnerabilities related to log4j")
        print("✓ Agent successfully processed the query")
        print(f"Response: {response.text[:200]}...")
    except Exception as e:
        print("✗ Agent failed to process the query")
        print(f"  - Error: {str(e)}")
    
    return True

def test_data_processing():
    """Test the data processing and integration logic."""
    print("\n=== Testing Data Processing Logic ===")
    
    # Create sample data from each component
    cve_data = {
        "result": {
            "vulnerabilities": [
                {
                    "cve_id": "CVE-2021-44228",
                    "description": "Apache Log4j2 2.0-beta9 through 2.15.0 (excluding security releases 2.12.2, 2.12.3, and 2.3.1) JNDI features used in configuration, log messages, and parameters do not protect against attacker controlled LDAP and other JNDI related endpoints.",
                    "published": "2021-12-10T10:15:00.000",
                    "last_modified": "2021-12-16T15:20:00.000",
                    "cvss_v3": {
                        "base_score": 10.0,
                        "severity": "CRITICAL"
                    }
                }
            ]
        }
    }
    
    epss_data = {
        "result": {
            "scores": [
                {
                    "cve_id": "CVE-2021-44228",
                    "epss_score": 0.975,
                    "percentile": 0.999
                }
            ]
        }
    }
    
    kev_data = {
        "result": {
            "vulnerabilities": [
                {
                    "cve_id": "CVE-2021-44228",
                    "in_catalog": True,
                    "kev_info": {
                        "date_added": "2021-12-11",
                        "short_description": "Apache Log4j Remote Code Execution Vulnerability"
                    }
                }
            ]
        }
    }
    
    patch_data = {
        "result": {
            "cve_id": "CVE-2021-44228",
            "patch_links": [
                "https://github.com/apache/logging-log4j2/releases/tag/log4j-2.15.0"
            ],
            "vendor_advisories": [
                "https://logging.apache.org/log4j/2.x/security.html"
            ]
        }
    }
    
    # Process the data
    try:
        unified_report = process_vulnerability_data(cve_data, epss_data, kev_data, patch_data)
        
        if unified_report and "vulnerabilities" in unified_report:
            print("✓ Successfully processed and integrated vulnerability data")
            vuln = unified_report["vulnerabilities"][0]
            print(f"  - CVE ID: {vuln.get('cve_id')}")
            print(f"  - CVSS Score: {vuln.get('cvss_v3', {}).get('base_score')}")
            print(f"  - EPSS Score: {vuln.get('epss', {}).get('epss_score')}")
            print(f"  - In KEV Catalog: {vuln.get('in_kev_catalog')}")
            print(f"  - Patch Links: {len(vuln.get('patch_links', []))}")
            print(f"  - Risk Score: {vuln.get('risk_score')}")
        else:
            print("✗ Failed to process and integrate vulnerability data")
    except Exception as e:
        print("✗ Error during data processing")
        print(f"  - Error: {str(e)}")
    
    return True

def run_all_tests():
    """Run all test cases."""
    print("=== Vulnerability Scanner Agent Test Suite ===")
    
    tests = [
        ("CVE Data Collector", test_cve_collector),
        ("EPSS Score Collector", test_epss_collector),
        ("CISA KEV Collector", test_kev_collector),
        ("Patch Link Finder", test_patch_finder),
        ("Data Processing Logic", test_data_processing),
        ("Integrated Agent", test_integrated_agent)
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nRunning test: {test_name}")
        try:
            success = test_func()
            results.append((test_name, success))
        except Exception as e:
            print(f"✗ Test failed with exception: {str(e)}")
            results.append((test_name, False))
    
    # Print summary
    print("\n=== Test Summary ===")
    all_passed = True
    for test_name, success in results:
        status = "✓ PASSED" if success else "✗ FAILED"
        if not success:
            all_passed = False
        print(f"{status} - {test_name}")
    
    if all_passed:
        print("\nAll tests passed successfully!")
    else:
        print("\nSome tests failed. Please check the output for details.")
    
    return all_passed

if __name__ == "__main__":
    run_all_tests()
